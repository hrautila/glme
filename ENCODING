
## Basics

GLME encoded stream is an adapted GOB stream where each data element is preceded by its type,
expressed in terms of small set of predefined types. Pointers are not encoded, but the things
they point to are. Compound types (structures) are identified by user selected unique positive
number greater constatn GLME_BASE_MAX. 


### Basic types

1 boolean
2 int
3 uint
4 float
5 char[] (vector)
6 string (null terminated)
7 complex

### Compound types

10 array
11 map   (not implemented yet)
12 named struct  (not implemented yet)
13 named map     (not implemented yet)
15 base typeid max

Type ids starting with 16 are used to identify structure types. They are encoded by user
defined encoding and decoding functions that are written with helper macros.

## Encoding of base types

Following are from GOB manual pages.

### Unsigned integer value

An unsigned integer is sent one of two ways. If it is less than 128, it is sent as a byte with
that value. Otherwise it is sent as a minimal-length big-endian (high byte first) byte stream
holding the value, preceded by one byte holding the byte count, negated. Thus 0 is transmitted
as (00), 7 is transmitted as (07) and 256 is transmitted as (FE 01 00). 

### Boolean value

A boolean is encoded within an unsigned integer: 0 for false, 1 for true.

### Signed integer value

A signed integer, i, is encoded within an unsigned integer, u. Within u, bits 1 upward contain the value; bit 0 says whether they should be complemented upon receipt.

'''c
   if (i < 0) {
     u = (~i << 1) | 1;
   } else {
     u = (i << 1);
   }
'''

### Floating point values

Floating-point numbers are always sent as a representation of a float64 value. That value is
converted to a uint64. The uint64 is then byte-reversed and sent as a regular unsigned integer.
The byte-reversal means the exponent and high-precision part of the mantissa go first. Since 
the low bits are often zero, this can save encoding bytes. For instance, 17.0 is encoded in
only three bytes (FE 31 40). 

#### Byte arrays and strings

Strings and byte arrays are sent as an unsigned count followed by that many uninterpreted
bytes of the value. 

### Array values

 All other arrays are sent as element type id and an unsigned count followed by that many
 elements  using the standard encoding for their type, recursively.

  <typeid> <count> <value>

### Structures

Structs are sent as a sequence of (field number, field value) pairs. The field value is sent
using the standard encoding for its type, recursively. If a field has the zero value for its
type, it is omitted from the transmission. The field number is defined by the type of the
encoded struct: the first field of the encoded type is field 0, the second is field 1, etc.
When encoding a value, the field numbers are delta encoded for efficiency and the fields are
always sent in order of increasing field number; the deltas are therefore unsigned. The
initialization for the delta encoding sets the field number to -1, so an unsigned integer
field 0 with value 7 is transmitted as unsigned delta = 1, unsigned value = 7 or (01 07).
Finally, after all the fields have been sent a terminating mark denotes the end of the struct.
That mark is a delta=0 value, which has representation (00). 

## BNF

   stream        ::= element*
   element       ::= simple | compound
   compound      ::= array | struct | map
   simple        ::= int | uint | float | vector | string

   int           ::= type-int int-value
   uint          ::= type-uint uint-value
   float         ::= type-float float-value
   vector        ::= type-vector vector-value
   string        ::= type-string string-value
   complex       ::= type-complex complex-value

   int-value     ::= INT(n)   (see above for int encoding)
   uint-value    ::= UINT(n)  (see above for uint encoding)
   float-value   ::= FLOAT(d) (see above for float encoding)
   complex-value ::= float-value float-value

   vector-value  ::= length byte-data
   string-value  ::= length byte-data
   length        ::= UINT(n)

   simple-type   ::= type-int | type-uint | type-float | type-vector | type-string
   type_int      ::= INT(3)
   type-uint     ::= INT(2)
   type-float    ::= INT(4)
   type-vector   ::= INT(5)
   type-string   ::= INT(6)
   type-complex  ::= INT(7)

   compound-type ::= type-array | type-map | type-struct
   type-array    ::= INT(10)
   type-map      ::= INT(11)
   type-struct   ::= INT(>GLME_BASE_MAX) (positive integer > GLME_BASE_MAX)

   array         ::= array-type array-value
   array-value   ::= simple-type count value-list
                  |  type-any count element-list

   count         ::= UINT(n)
   type-any      ::= INT(0)

   struct        ::= type-id struct-value
   struct-value  ::= field* struct-end
   field         ::= delta element
   delta         ::= UINT(n)
   struct-end    ::= UINT(0)

   map           ::= type-map map-value
   map-value     ::= key-type elem-type count value-pair*
                  |  key-type type-any count typed-pair*
   key-type      ::= type-uint | type-string
   elem-type     ::= simple-type | compound-type
   value-pair    ::= key-value elem-value
   typed-pair    ::= key-value element

## Examples

unsigned int(10): [
  6   -- unsinged integer type (3) encoded as signed int
  10  -- value 
]

unsigned int(256): [
  6   -- unsigend integer type (3) encoded as signed int
  FE  -- length (-2)
  1   -- high byte
  0   -- low byte
]

int(10): [
  4   -- integer type (2) encoded as signed int
  20  -- value 
]

int(-10): [
  4   -- integer type (2) encoded as signed int
  21  -- value 
]

string('hello'): [
  10  -- string type (5)
  5   -- length
  'h'
  'e'
  'l'
  'l'
  'o'
]

char[3]('hei'): [
   10  -- byte array type (5)
   3   -- length
   'h'
   'e'
   'i'
]


int[3](1,2,3): [
   20  -- array type (10)
   4   -- element type id
   3   -- length
   2   -- value
   4   -- value
   6   -- value
]

struct { int a; int b; }({.a = 1; .b = 2} ID=32): [
   64  -- struct type id (user selected positive integer)
   1   -- delta
   4   -- integer type
   2   -- value a = 1
   1   -- delta to field b
   4   -- integer type
   4   -- value b = 2
   0   -- end struct
]


struct { int a; int b; }({.a = 0; .b = 2} ID=32): [
   64  -- struct type id (user selected positive integer)
   2   -- delta
   4   -- integer type
   4   -- value b = 2
   0   -- end struct
]


struct { int a; int b; }({.a = 0; .b = 2} TYPENAME=T): [
   24  -- named struct type
   10  -- string type  | encoded 
   1   -- length       |   TYPENAME
   'T'                 |
   2   -- delta
   4   -- integer type
   4   -- value b = 2
   0   -- end struct
]

map { str -> struct { int a } } ({"x": { .a = 10 }} ID=33): [
    26  -- map type
    10  -- key type (string)
    66  -- element type (ID=33)
    1   -- number of elements
    1   -- len of 1st key
    'x'
    1   -- delta 
    4   -- integer type
    20  -- value
    0   -- end of struct
]


map { str -> struct { int a } } ({"x": { .a = 10 }} NAME='MAP'): [
    28  -- named map type
    10  -- string type  | encoded 
    3   -- length       |   TYPENAME
    'M'                 |
    'A'                 |
    'P'                 |
    10  -- key type (string)
    66  -- element type (ID=33)
    1   -- number of elements
    1   -- len          | 1st key
    'x'                 |
    1   -- delta        | 1st element
    4   -- integer type |
    20  -- value        |
    0   -- end of struct|
]


## Usage

### Encoding and decoding simple variables

```c
int a = 1; double b = -2.0;

glme_buf_init(&gbuf, 1024);
glme_encode_int(&gbuf, &a);
glme_encode_int(&gbuf, &b);
```


```c
int a1; double b1;
glme_decode_int(&gbuf, &a1);
glme_decode_double(&gbuf, &b1);
assert(a1 == 1); assert(b1 == -2.0);
```

Following would fail as second variable is not encoded as integer.

```c
int a1, b1;
glme_decode_int(&gbuf, &a1)
// this will return error and value of b1 will undefined
glme_decode_int(&gbuf, &b1) 
```

### Encoding simple values

```c
glme_buf_init(&gbuf, 1024);
glme_encode_value_int(&gbuf, 1);
glme_encode_value_double(&gbuf, -2.0);
```

Above could decoded recpectively with following

```c
int a; double b;
glme_decode_value_int(&gbuf, &a);
glme_decode_value_double(&gbuf, &b);
```

This would not fail either
```c
int a, b;
glme_decode_value_int(&gbuf, &a);
glme_decode_value_int(&gbuf, &b);
```

### Encoding bytes arrays and strings

```c
// encode fixed length array
glme_encode_vector(&gbuf, "hello", 5);
// encode null terminated string
glme_encode_string(&gbuf, "hello");
```

```c
char vec[5];
char *s;    
// decode fixed length byte array
glme_decode_vector(&gbuf, vec, 5);
// decode and allocate null terminated string
glme_decode_string(&gbuf, &s);
```


### Encoding arrays

```c
int ivec[5] = {1, 2, 3, 4, 5};
glme_encode_array_start(&gbuf, GLME_INT, 5);
for (i = 0; i < 5; i++)
   glme_encode_value_int(&gbuf, ivec[i]);
```

